// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// Define user role
enum UserRole {
  USER
  ADMIN
}

// Define user model
model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  avatar            String?
  firstname         String
  lastname          String
  email             String    @unique
  /// @TypeGraphQL.omit(output: true)
  password          String    
  job               String
  // Define user role with USER as default
  role              UserRole  @default(USER)
  // The team the user belongs to
  team              Team?     @relation(fields: [teamId], references: [id])
  teamId            String?   @db.ObjectId
  // The list of projects the user is assigned to
  projects          Project[]
  // The list of comments the user has made on projects
  project_comments  ProjectComment[]
  // The list of comments the user has made on tasks
  task_comments     TaskComment[]
  // The tasks the user is assigned to
  tasks             Task[]
}

// Define team model
model Team {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  // The list of users that belong to the team
  members   User[]
}

// Define project model
model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  status      String
  description String?   // Optionnal for development & testing
  date        DateTime? // Optionnal for development & testing
  deadline    DateTime? // Optionnal
  // The user that own and created the project
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String    @db.ObjectId
  // The list of tasks that belong to the project
  tasks       Task[]
  // The list of comments users has made on the project
  comments    ProjectComment[]
  // The list of files attached to the project
  files       ProjectFile[]
}

// Define comment model
model ProjectComment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime? // Optionnal for development & testing
  content   String
  // The project the comment belongs to
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String    @db.ObjectId
  // The user that has made the comment
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
}

// Define Task model
model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  // The user assigned to the task
  assignee    User?     @relation(fields: [assigneeId], references: [id]) // Optionnal
  assigneeId  String?   @db.ObjectId // Optionnal
  // The duration of the task
  duration    Int?      // Optionnal
  breakpoints String?   // Optionnal
  time_spent  Int?      // Optionnal
  due_date    DateTime? // Optionnal
  priority    DateTime? // Optionnal
  // The project the task belongs to
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @db.ObjectId
  // The list of comments users has made on the task
  comments    TaskComment[]
  // The list of files attached to the task
  files       TaskFile[]
}

model TaskComment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime? // Optionnal for development & testing
  content   String
  // The task the comment belongs to
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String    @db.ObjectId
  // The user that has made the comment
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
}

// Define file model for project
model ProjectFile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String?   // Optionnal for development & testing
  size      Int?      // Optionnal for development & testing
  // The project the file belongs to
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String    @db.ObjectId
}

// Define file model for project
model TaskFile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String?   // Optionnal for development & testing
  size      Int?      // Optionnal for development & testing
  // The project the file belongs to
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String    @db.ObjectId
}
